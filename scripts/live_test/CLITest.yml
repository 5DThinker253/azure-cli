# Some content of this file is generated.
# USER_Target
#   "": CLI modules
#   extensions: ALL extensions
#   vm ext-account: certain targets

name: CLI TEST RUN $(USER_TARGET) $(USER_LIVE) $(USER_USERNAME) $(Date:yyyyMMdd)$(Rev:.r)

trigger:
  branches:
    exclude:
    - '*'

variables:
- template: ${{ variables.Pipeline.Workspace }}/.azure-pipelines/templates/variables.yml

parameters:
- name: platforms
  type: object
  default:
  # pool: 1ES self-hosted agent pools, https://dev.azure.com/azclitools/internal/_settings/agentqueues
  # vmImage: Microsoft-hosted agent pools, https://learn.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops&tabs=yaml#software
  # Please do not use pool and vmImage at the same time.
  - name: ubuntu2004
    pool: pool-ubuntu-2004
    vmImage:
  - name: window2019
    pool: pool-windows-2019
    vmImage:
  - name: macos12
    pool:
    vmImage: macOS-12

#schedules:
#- cron: "0 18 * * 5"
#  displayName: Weekly Friday test
#  branches:
#    include:
#    - CLITest
#  always: true

# https://stackoverflow.com/questions/54372758/azure-devops-yaml-pipelines-specification-of-matrix-through-build-variable
jobs:
- job: LiveTest
  displayName: Live Test
  # Sometimes the live test will be stuck forever, so the timeout cannot be set to 0, it is recommended to set it to twice the maximum time
  timeoutInMinutes: 600
  pool:
    name: $(pool)
    vmImage: $(vmImage)
  strategy:
    maxParallel: 100
    matrix:
      ${{ each plat in parameters.platforms }}:
        instance1-${{ plat.name }}:
          Instance_idx: 1
          pool: ${{ plat.pool }}
          vmImage: ${{ plat.vmImage }}
          platform: ${{ plat.name }}
        instance2-${{ plat.name }}:
          Instance_idx: 2
          pool: ${{ plat.pool }}
          vmImage: ${{ plat.vmImage }}
          platform: ${{ plat.name }}
        instance3-${{ plat.name }}:
          Instance_idx: 3
          pool: ${{ plat.pool }}
          vmImage: ${{ plat.vmImage }}
          platform: ${{ plat.name }}
        instance4-${{ plat.name }}:
          Instance_idx: 4
          pool: ${{ plat.pool }}
          vmImage: ${{ plat.vmImage }}
          platform: ${{ plat.name }}
        instance5-${{ plat.name }}:
          Instance_idx: 5
          pool: ${{ plat.pool }}
          vmImage: ${{ plat.vmImage }}
          platform: ${{ plat.name }}
        instance6-${{ plat.name }}:
          Instance_idx: 6
          pool: ${{ plat.pool }}
          vmImage: ${{ plat.vmImage }}
          platform: ${{ plat.name }}
        instance7-${{ plat.name }}:
          Instance_idx: 7
          pool: ${{ plat.pool }}
          vmImage: ${{ plat.vmImage }}
          platform: ${{ plat.name }}
        instance8-${{ plat.name }}:
          Instance_idx: 8
          pool: ${{ plat.pool }}
          vmImage: ${{ plat.vmImage }}
          platform: ${{ plat.name }}
        instance9-${{ plat.name }}:
          Instance_idx: 9
          pool: ${{ plat.pool }}
          vmImage: ${{ plat.vmImage }}
          platform: ${{ plat.name }}
        instance10-${{ plat.name }}:
          Instance_idx: 10
          pool: ${{ plat.pool }}
          vmImage: ${{ plat.vmImage }}
          platform: ${{ plat.name }}
        instance11-${{ plat.name }}:
          Instance_idx: 11
          pool: ${{ plat.pool }}
          vmImage: ${{ plat.vmImage }}
          platform: ${{ plat.name }}
        instance12-${{ plat.name }}:
          Instance_idx: 12
          pool: ${{ plat.pool }}
          vmImage: ${{ plat.vmImage }}
          platform: ${{ plat.name }}
        instance13-${{ plat.name }}:
          Instance_idx: 13
          pool: ${{ plat.pool }}
          vmImage: ${{ plat.vmImage }}
          platform: ${{ plat.name }}
        instance14-${{ plat.name }}:
          Instance_idx: 14
          pool: ${{ plat.pool }}
          vmImage: ${{ plat.vmImage }}
          platform: ${{ plat.name }}
        instance15-${{ plat.name }}:
          Instance_idx: 15
          pool: ${{ plat.pool }}
          vmImage: ${{ plat.vmImage }}
          platform: ${{ plat.name }}
        instance16-${{ plat.name }}:
          Instance_idx: 16
          pool: ${{ plat.pool }}
          vmImage: ${{ plat.vmImage }}
          platform: ${{ plat.name }}
        instance17-${{ plat.name }}:
          Instance_idx: 17
          pool: ${{ plat.pool }}
          vmImage: ${{ plat.vmImage }}
          platform: ${{ plat.name }}
        instance18-${{ plat.name }}:
          Instance_idx: 18
          pool: ${{ plat.pool }}
          vmImage: ${{ plat.vmImage }}
          platform: ${{ plat.name }}
        instance19-${{ plat.name }}:
          Instance_idx: 19
          pool: ${{ plat.pool }}
          vmImage: ${{ plat.vmImage }}
          platform: ${{ plat.name }}
        instance20-${{ plat.name }}:
          Instance_idx: 20
          pool: ${{ plat.pool }}
          vmImage: ${{ plat.vmImage }}
          platform: ${{ plat.name }}
  steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(PYTHON_VERSION)'
        addToPath: true
        architecture: 'x64'
    - bash: |
        cd ..
        pwd
        workDir=$(pwd)
        ls
        # ssh-keygen -f ~/.ssh/id_rsa -t rsa -N ''
        git config --global user.email "AzurePipelines"
        git config --global user.name "AzurePipelines"

        # print variables
        echo "USER_TARGET: $(USER_TARGET)"
        echo "USER_REPO: $(USER_REPO)"
        echo "USER_REPO_EXT: $(USER_REPO_EXT)"
        echo "USER_BRANCH: $(USER_BRANCH)"
        echo "USER_BRANCH_EXT: $(USER_BRANCH_EXT)"

        # Whether commit changes
        if [[ "$(USER_USERNAME)" != "" && "$(USER_TOKEN)" != "" ]]; then
          REPO="$(USER_REPO)"
          EXT_REPO="$(USER_REPO_EXT)"
          # Pass username and token so that we can commit changes
          git clone -b $(USER_BRANCH) ${REPO:0:8}$(USER_USERNAME):$(USER_TOKEN)@${REPO:8}
          git clone -b $(USER_BRANCH_EXT) ${EXT_REPO:0:8}$(USER_USERNAME):$(USER_TOKEN)@${EXT_REPO:8}
        else
          git clone -b $(USER_BRANCH) $(USER_REPO)
          git clone -b $(USER_BRANCH_EXT) $(USER_REPO_EXT)
        fi

        python -m venv env
        if [[ "$(uname)" == "Darwin" ]]; then
          source env/bin/activate
          export OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES
          echo "##vso[task.setvariable variable=workDir]$workDir"
        elif [[ "$(expr substr $(uname -s) 1 5)" == "Linux" ]]; then
          source env/bin/activate
          echo "##vso[task.setvariable variable=workDir]$workDir"
        elif [[ "$(expr substr $(uname -s) 1 5)" == "MINGW" ]]; then
          source env/Scripts/activate
          echo "##vso[task.setvariable variable=workDir]$(Agent.BuildDirectory)"
        fi

        pip install azdev azure-kusto-data azure-kusto-ingest bs4 pytest-json-report pytest-html pytest-rerunfailures

        azdev setup -c azure-cli -r azure-cli-extensions

        # This helps detect issues in CI if a used SDK API version is deleted by the below script.
        python $workDir/s/scripts/trim_sdk.py

        # Compact aaz folders of modules
        python $workDir/s/scripts/compact_aaz.py

        az -v
        az login --service-principal --username $(AZURECLITESTUSER) --password $(AZURECLITESTPASSWORD) --tenant $(AZURECLITESTTENANTID)
        az account set -s $(AZURECLITESTSUBSCRIPTIONID)

        # Clean policy
        python $workDir/s/scripts/live_test/clean_policy.py
        
        echo "Run tests"
        python $workDir/s/scripts/live_test/live_test.py "$workDir"

        pwd
        ls
        # Whether commit changes
        if [[ "$(USER_USERNAME)" != "" && "$(USER_TOKEN)" != "" && ! "$(USER_TARGET)" =~ ^ext-.* && "$(USER_TARGET)" != "extensions" ]]; then
          cd azure-cli
          git status
          git add .
          git commit -m "Upload recording files"
          git push origin $(USER_BRANCH)
        elif [[ "$(USER_USERNAME)" != "" && "$(USER_TOKEN)" != "" && ("$(USER_TARGET)" =~ ^ext-.* || "$(USER_TARGET)" == "extensions") ]]; then
          cd azure-cli-extensions
          git status
          git add .
          git commit -m "Upload recording files"
          git push origin $(USER_BRANCH_EXT)
        fi
      env:
        INSTANCE_CNT: 20
        INSTANCE_IDX: $(Instance_idx)
        USER_TARGET: $(USER_TARGET)
        USER_USERNAME: $(USER_USERNAME)
        USER_TOKEN: $(USER_TOKEN)
        USER_PARALLELISM: $(USER_PARALLELISM)
        PLATFORM: $(platform)
        PYTHON_VERSION: $(PYTHON_VERSION)
        KUSTO_CLUSTER: $(KUSTO_CLUSTER)
        KUSTO_CLIENT_ID: $(KUSTO_CLIENT_ID)
        KUSTO_CLIENT_SECRET: $(KUSTO_CLIENT_SECRET)
        KUSTO_TENANT_ID: $(KUSTO_TENANT_ID)
        KUSTO_DATABASE: $(KUSTO_DATABASE)
        KUSTO_TABLE: $(KUSTO_TABLE)
        BUILD_ID: $(Build.BuildId)

    - task: PublishTestResults@2
      inputs:
        testResultsFiles: '$(workDir)/test_results.*.xml'
        testRunTitle: 'Azure CLI live test results of $(Target)'
        mergeTestResults: true
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(workDir)'
        ArtifactName: 'livetest'
        publishLocation: 'Container'
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(workDir)'
        ArtifactName: 'livetest'
        publishLocation: 'Container'
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(workDir)'
        ArtifactName: 'livetest'
        publishLocation: 'Container'
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(workDir)'
        ArtifactName: 'livetest'
        publishLocation: 'Container'

#- job: SendEmail
#  displayName: Send email
#  timeoutInMinutes: 120
#  dependsOn: LiveTest
#  condition: succeededOrFailed()
#  pool:
#    name: ${{ variables.ubuntu_pool }}
#  steps:
#    - task: UsePythonVersion@0
#      inputs:
#        versionSpec: '$(PYTHON_VERSION)'
#        addToPath: true
#        architecture: 'x64'
#    - task: DownloadBuildArtifacts@0
#      inputs:
#        buildType: 'current'
#        downloadType: 'specific'
#        downloadPath: '$(System.ArtifactsDirectory)'
#    - bash: |
#        set -o errexit
#        echo "ArtifastsDirectory: $(System.ArtifactsDirectory)"
#        ls $(System.ArtifactsDirectory)
#        pwd
#        workDir=$(pwd)
#        commit_id=`git ls-remote https://github.com/Azure/azure-cli.git HEAD`
#        pip install azure-communication-email
#        pip install mysql-connector-python
#        pip install requests
#        pip install tqdm
#        pip install bs4
#        # pip install certifi
#        # Send notification
#        az -v
#        echo "login to user azureclilivetest"
#        # az login -u $(AZURECLITESTUSER) -p $(AZURECLITESTPASSWORD)
#        az login --service-principal --username $(AZURECLITESTUSER) --password $(AZURECLITESTPASSWORD) --tenant $(AZURECLITESTTENANTID)
#        az account set -s $(AZURECLITESTSUBSCRIPTIONID)
#        echo "set account"
#        echo "send email to grid"
#        python $workDir/scripts/live_test/sendemail.py "$(SENDGRID_KEY)" "$(Build.BuildId)" "$(USER_REPO)" "$(USER_BRANCH)" "$(USER_TARGET)" "$(USER_LIVE)" "$(System.ArtifactsDirectory)" "$(Build.RequestedForEmail)" "$(ACCOUNT_KEY)" "$commit_id" "$(USER_REPO_EXT)" "$(USER_BRANCH_EXT)"
#
#- job: CleanResource
#  displayName: Clean Resource
#  timeoutInMinutes: 360
#  dependsOn: LiveTest
#  condition: succeededOrFailed()
#  pool:
#    name: ${{ variables.ubuntu_pool }}
#  steps:
#    - task: UsePythonVersion@0
#      inputs:
#        versionSpec: '$(PYTHON_VERSION)'
#        addToPath: true
#        architecture: 'x64'
#    - bash: |
#        set -o errexit
#        workDir=$(pwd)
#        pip install tqdm
#        az -v
#        echo "login to user azureclilivetest"
#        az login --service-principal --username $(AZURECLITESTUSER) --password $(AZURECLITESTPASSWORD) --tenant $(AZURECLITESTTENANTID)
#        az account set -s $(AZURECLITESTSUBSCRIPTIONID)
#        echo "set account"
#        echo "clean resource"
#        python $workDir/scripts/live_test/clean.py
