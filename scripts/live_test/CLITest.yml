# Some content of this file is generated.
# USER_Target
#   "": CLI modules
#   extensions: ALL extensions
#   vm ext-account: certain targets

name: CLI TEST RUN $(USER_TARGET) $(USER_LIVE) $(USER_USERNAME) $(Date:yyyyMMdd)$(Rev:.r)

trigger:
  branches:
    exclude:
    - '*'

variables:
- template: ${{ variables.Pipeline.Workspace }}/.azure-pipelines/templates/variables.yml

parameters:
- name: platforms
  type: object
  default:
  # pool: 1ES self-hosted agent pools, https://dev.azure.com/azclitools/internal/_settings/agentqueues
  # vmImage: Microsoft-hosted agent pools, https://learn.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops&tabs=yaml#software
  # Please do not use pool and vmImage at the same time.
  - name: ubuntu2004
    pool: pool-ubuntu-2004
    vmImage:
  - name: window2019
    pool: pool-windows-2019
    vmImage:
  - name: macos12
    pool:
    vmImage: macOS-12

#schedules:
#- cron: "0 18 * * 5"
#  displayName: Weekly Friday test
#  branches:
#    include:
#    - CLITest
#  always: true

# https://stackoverflow.com/questions/54372758/azure-devops-yaml-pipelines-specification-of-matrix-through-build-variable
jobs:
- job: LiveTest
  displayName: Live Test
  # Sometimes the live test will be stuck forever, so the timeout cannot be set to 0, it is recommended to set it to twice the maximum time
  timeoutInMinutes: 600
  pool:
    name: $(pool)
    vmImage: $(vmImage)
  strategy:
    maxParallel: 100
    matrix:
      ${{ each plat in parameters.platforms }}:
        instance1-${{ plat.name }}:
          Instance_idx: 1
          pool: ${{ plat.pool }}
          vmImage: ${{ plat.vmImage }}
          platform: ${{ plat.name }}
        instance2-${{ plat.name }}:
          Instance_idx: 2
          pool: ${{ plat.pool }}
          vmImage: ${{ plat.vmImage }}
          platform: ${{ plat.name }}
        instance3-${{ plat.name }}:
          Instance_idx: 3
          pool: ${{ plat.pool }}
          vmImage: ${{ plat.vmImage }}
          platform: ${{ plat.name }}
        instance4-${{ plat.name }}:
          Instance_idx: 4
          pool: ${{ plat.pool }}
          vmImage: ${{ plat.vmImage }}
          platform: ${{ plat.name }}
        instance5-${{ plat.name }}:
          Instance_idx: 5
          pool: ${{ plat.pool }}
          vmImage: ${{ plat.vmImage }}
          platform: ${{ plat.name }}
        instance6-${{ plat.name }}:
          Instance_idx: 6
          pool: ${{ plat.pool }}
          vmImage: ${{ plat.vmImage }}
          platform: ${{ plat.name }}
        instance7-${{ plat.name }}:
          Instance_idx: 7
          pool: ${{ plat.pool }}
          vmImage: ${{ plat.vmImage }}
          platform: ${{ plat.name }}
        instance8-${{ plat.name }}:
          Instance_idx: 8
          pool: ${{ plat.pool }}
          vmImage: ${{ plat.vmImage }}
          platform: ${{ plat.name }}
        instance9-${{ plat.name }}:
          Instance_idx: 9
          pool: ${{ plat.pool }}
          vmImage: ${{ plat.vmImage }}
          platform: ${{ plat.name }}
        instance10-${{ plat.name }}:
          Instance_idx: 10
          pool: ${{ plat.pool }}
          vmImage: ${{ plat.vmImage }}
          platform: ${{ plat.name }}
        instance11-${{ plat.name }}:
          Instance_idx: 11
          pool: ${{ plat.pool }}
          vmImage: ${{ plat.vmImage }}
          platform: ${{ plat.name }}
        instance12-${{ plat.name }}:
          Instance_idx: 12
          pool: ${{ plat.pool }}
          vmImage: ${{ plat.vmImage }}
          platform: ${{ plat.name }}
        instance13-${{ plat.name }}:
          Instance_idx: 13
          pool: ${{ plat.pool }}
          vmImage: ${{ plat.vmImage }}
          platform: ${{ plat.name }}
        instance14-${{ plat.name }}:
          Instance_idx: 14
          pool: ${{ plat.pool }}
          vmImage: ${{ plat.vmImage }}
          platform: ${{ plat.name }}
        instance15-${{ plat.name }}:
          Instance_idx: 15
          pool: ${{ plat.pool }}
          vmImage: ${{ plat.vmImage }}
          platform: ${{ plat.name }}
        instance16-${{ plat.name }}:
          Instance_idx: 16
          pool: ${{ plat.pool }}
          vmImage: ${{ plat.vmImage }}
          platform: ${{ plat.name }}
        instance17-${{ plat.name }}:
          Instance_idx: 17
          pool: ${{ plat.pool }}
          vmImage: ${{ plat.vmImage }}
          platform: ${{ plat.name }}
        instance18-${{ plat.name }}:
          Instance_idx: 18
          pool: ${{ plat.pool }}
          vmImage: ${{ plat.vmImage }}
          platform: ${{ plat.name }}
        instance19-${{ plat.name }}:
          Instance_idx: 19
          pool: ${{ plat.pool }}
          vmImage: ${{ plat.vmImage }}
          platform: ${{ plat.name }}
        instance20-${{ plat.name }}:
          Instance_idx: 20
          pool: ${{ plat.pool }}
          vmImage: ${{ plat.vmImage }}
          platform: ${{ plat.name }}
  steps:
    - bash: |
        if [[ "$(USER_TARGET)" =~ "$(Target)" || ("$(USER_TARGET)" == "main" && ! "$(Target)" =~ ^ext-.*) || ("$(USER_TARGET)" == "extensions" && "$(Target)" =~ ^ext-.*) || ("$(USER_TARGET)" == "ALL" || "$(USER_TARGET)" == "all" || "$(USER_TARGET)" == "") ]]; then
          echo "Match!"
          echo "##vso[task.setvariable variable=Match]1"
        else
          echo "Not match!"
          echo "##vso[task.setvariable variable=Match]0"
        fi
    - task: UsePythonVersion@0
      condition: and(succeededOrFailed(), eq(variables.Match, '1'))
      inputs:
        versionSpec: '$(PYTHON_VERSION)'
        addToPath: true
        architecture: 'x64'
    - bash: |
        cd ..
        pwd
        workDir=$(pwd)
        ls
        # ssh-keygen -f ~/.ssh/id_rsa -t rsa -N ''
        git config --global user.email "AzurePipelines"
        git config --global user.name "AzurePipelines"

        # print variables
        echo "USER_TARGET: $(USER_TARGET)"
        echo "USER_REPO: $(USER_REPO)"
        echo "USER_REPO_EXT: $(USER_REPO_EXT)"
        echo "USER_BRANCH: $(USER_BRANCH)"
        echo "USER_BRANCH_EXT: $(USER_BRANCH_EXT)"

        # Whether commit changes
        if [[ "$(USER_USERNAME)" != "" && "$(USER_TOKEN)" != "" ]]; then
          REPO="$(USER_REPO)"
          EXT_REPO="$(USER_REPO_EXT)"
          # Pass username and token so that we can commit changes
          git clone -b $(USER_BRANCH) ${REPO:0:8}$(USER_USERNAME):$(USER_TOKEN)@${REPO:8}
          git clone -b $(USER_BRANCH_EXT) ${EXT_REPO:0:8}$(USER_USERNAME):$(USER_TOKEN)@${EXT_REPO:8}
        else
          git clone -b $(USER_BRANCH) $(USER_REPO)
          git clone -b $(USER_BRANCH_EXT) $(USER_REPO_EXT)
        fi

        python -m venv env
        if [[ "$(uname)" == "Darwin" ]]; then
          source env/bin/activate
          export OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES
          echo "##vso[task.setvariable variable=workDir]$workDir"
        elif [[ "$(expr substr $(uname -s) 1 5)" == "Linux" ]]; then
          source env/bin/activate
          echo "##vso[task.setvariable variable=workDir]$workDir"
        elif [[ "$(expr substr $(uname -s) 1 5)" == "MINGW" ]]; then
          source env/Scripts/activate
          echo "##vso[task.setvariable variable=workDir]$(Agent.BuildDirectory)"
        fi
        pip install azdev
        # git clone https://github.com/Azure/azure-cli-dev-tools.git
        # git clone -b fix https://github.com/qwordy/azure-cli-dev-tools.git
        # pip install -e azure-cli-dev-tools
        pip install pytest-json-report
        pip install pytest-html
        pip install pytest-rerunfailures

        azdev setup -c azure-cli -r azure-cli-extensions

        # # Remove ext- prefix
        # FinalTarget="$(Target)"
        # if [[ "${FinalTarget}" =~ ^ext-.* ]]; then
        #   echo "It is an extention"
        #   echo $(Target)
        #   FinalTarget=${FinalTarget:4}
        #   azdev extension add ${FinalTarget}
        # fi
        # echo ${FinalTarget}

        # This helps detect issues in CI if a used SDK API version is deleted by the below script.
        python $workDir/s/scripts/trim_sdk.py

        # Compact aaz folders of modules
        python $workDir/s/scripts/compact_aaz.py

        az -v
        # az login -u azureclilivetest@azuresdkteam.onmicrosoft.com -p $(AZURECLITESTPASSWORD)
        az login --service-principal --username $(AZURECLITESTUSER) --password $(AZURECLITESTPASSWORD) --tenant $(AZURECLITESTTENANTID)
        az account set -s $(AZURECLITESTSUBSCRIPTIONID)

        # Clean resources
        python $workDir/s/scripts/live_test/clean_policy.py

        python scripts/live_test/automation_full_test.py
        # # Whether commit changes
        # if [[ "$(USER_USERNAME)" != "" && "$(USER_TOKEN)" != "" ]]; then
        #   echo "Commit mode"
        #   azdev test ${FinalTarget} --no-exitfirst -a "-n $(USER_PARALLELISM)"
        #   azdev test ${FinalTarget} --live --lf --xml-path test_results.parallel.xml --no-exitfirst -a "-n $(USER_PARALLELISM) --json-report --json-report-summary --json-report-file=$(Target).$(platform).report.parallel.json --html=$(Target).$(platform).report.parallel.html --self-contained-html --capture=sys"
        # else
        #   echo "Normal mode"
        #   # Sequential
        #   azdev test ${FinalTarget} $(USER_LIVE) --mark serial --xml-path test_results.sequential.xml --no-exitfirst -a "-n 1 --json-report --json-report-summary --json-report-file=$(Target).$(platform).report.sequential.json --html=$(Target).$(platform).report.sequential.html --self-contained-html --capture=sys"
        #   # Parallel
        #   azdev test ${FinalTarget} $(USER_LIVE) --mark "not serial" --xml-path test_results.parallel.xml --no-exitfirst -a "-n $(USER_PARALLELISM) --json-report --json-report-summary --json-report-file=$(Target).$(platform).report.parallel.json --html=$(Target).$(platform).report.parallel.html --self-contained-html --capture=sys"
        # fi

        pwd
        ls
        # # Whether commit changes
        # if [[ "$(USER_USERNAME)" != "" && "$(USER_TOKEN)" != "" && ! "$(USER_TARGET)" =~ ^ext-.* && "$(USER_TARGET)" != "extensions" ]]; then
        #   cd azure-cli
        #   git status
        #   git add .
        #   git commit -m "Upload recording files"
        #   git push origin $(USER_BRANCH)
        # elif [[ "$(USER_USERNAME)" != "" && "$(USER_TOKEN)" != "" && ("$(USER_TARGET)" =~ ^ext-.* || "$(USER_TARGET)" == "extensions") ]]; then
        #   cd azure-cli-extensions
        #   git status
        #   git add .
        #   git commit -m "Upload recording files"
        #   git push origin $(USER_BRANCH_EXT)
        # fi

        # echo "Send data to kusto db!"
        # pip install azure-kusto-data azure-kusto-ingest bs4
        # python $workDir/s/scripts/live_test/send_to_kusto.py "$(KUSTO_CLUSTER)" "$(KUSTO_CLIENT_ID)" "$(KUSTO_CLIENT_SECRET)" "$(KUSTO_TENANT_ID)" "$(KUSTO_DATABASE)" "$(KUSTO_TABLE)" "$(Target)" "$(Build.BuildId)" "$(USER_TARGET)" "$workDir" "$(PYTHON_VERSION)" "$(platform)"
      condition: and(succeededOrFailed(), eq(variables.Match, '1'))
      env:
        INSTANCE_CNT: ${{ parameters.instance_cnt }}
        INSTANCE_IDX: ${{ parameters.instance_idx }}
        USER_TARGET: $(USER_TARGET)
        USER_USERNAME: $(USER_USERNAME)
        USER_TOKEN: $(USER_TOKEN)
        USER_PARALLELISM: $(USER_PARALLELISM)
        PLATFORM: $(platform)


#    - task: PublishTestResults@2
#      condition: and(succeededOrFailed(), eq(variables.Match, '1'))
#      inputs:
#        testResultsFiles: '$(workDir)/test_results.*.xml'
#        testRunTitle: 'Azure CLI live test results of $(Target)'
#        mergeTestResults: true
#    - task: PublishBuildArtifacts@1
#      condition: and(succeededOrFailed(), eq(variables.Match, '1'))
#      inputs:
#        PathtoPublish: '$(workDir)/$(Target).$(platform).report.sequential.json'
#        ArtifactName: '$(Target)'
#        publishLocation: 'Container'
#    - task: PublishBuildArtifacts@1
#      condition: and(succeededOrFailed(), eq(variables.Match, '1'))
#      inputs:
#        PathtoPublish: '$(workDir)/$(Target).$(platform).report.sequential.html'
#        ArtifactName: '$(Target)'
#        publishLocation: 'Container'
#    - task: PublishBuildArtifacts@1
#      condition: and(succeededOrFailed(), eq(variables.Match, '1'))
#      inputs:
#        PathtoPublish: '$(workDir)/$(Target).$(platform).report.parallel.json'
#        ArtifactName: '$(Target)'
#        publishLocation: 'Container'
#    - task: PublishBuildArtifacts@1
#      condition: and(succeededOrFailed(), eq(variables.Match, '1'))
#      inputs:
#        PathtoPublish: '$(workDir)/$(Target).$(platform).report.parallel.html'
#        ArtifactName: '$(Target)'
#        publishLocation: 'Container'

#- job: SendEmail
#  displayName: Send email
#  timeoutInMinutes: 120
#  dependsOn: LiveTest
#  condition: succeededOrFailed()
#  pool:
#    name: ${{ variables.ubuntu_pool }}
#  steps:
#    - task: UsePythonVersion@0
#      inputs:
#        versionSpec: '$(PYTHON_VERSION)'
#        addToPath: true
#        architecture: 'x64'
#    - task: DownloadBuildArtifacts@0
#      inputs:
#        buildType: 'current'
#        downloadType: 'specific'
#        downloadPath: '$(System.ArtifactsDirectory)'
#    - bash: |
#        set -o errexit
#        echo "ArtifastsDirectory: $(System.ArtifactsDirectory)"
#        ls $(System.ArtifactsDirectory)
#        pwd
#        workDir=$(pwd)
#        commit_id=`git ls-remote https://github.com/Azure/azure-cli.git HEAD`
#        pip install azure-communication-email
#        pip install mysql-connector-python
#        pip install requests
#        pip install tqdm
#        pip install bs4
#        # pip install certifi
#        # Send notification
#        az -v
#        echo "login to user azureclilivetest"
#        # az login -u $(AZURECLITESTUSER) -p $(AZURECLITESTPASSWORD)
#        az login --service-principal --username $(AZURECLITESTUSER) --password $(AZURECLITESTPASSWORD) --tenant $(AZURECLITESTTENANTID)
#        az account set -s $(AZURECLITESTSUBSCRIPTIONID)
#        echo "set account"
#        echo "send email to grid"
#        python $workDir/scripts/live_test/sendemail.py "$(SENDGRID_KEY)" "$(Build.BuildId)" "$(USER_REPO)" "$(USER_BRANCH)" "$(USER_TARGET)" "$(USER_LIVE)" "$(System.ArtifactsDirectory)" "$(Build.RequestedForEmail)" "$(ACCOUNT_KEY)" "$commit_id" "$(USER_REPO_EXT)" "$(USER_BRANCH_EXT)"
#
#- job: CleanResource
#  displayName: Clean Resource
#  timeoutInMinutes: 360
#  dependsOn: LiveTest
#  condition: succeededOrFailed()
#  pool:
#    name: ${{ variables.ubuntu_pool }}
#  steps:
#    - task: UsePythonVersion@0
#      inputs:
#        versionSpec: '$(PYTHON_VERSION)'
#        addToPath: true
#        architecture: 'x64'
#    - bash: |
#        set -o errexit
#        workDir=$(pwd)
#        pip install tqdm
#        az -v
#        echo "login to user azureclilivetest"
#        az login --service-principal --username $(AZURECLITESTUSER) --password $(AZURECLITESTPASSWORD) --tenant $(AZURECLITESTTENANTID)
#        az account set -s $(AZURECLITESTSUBSCRIPTIONID)
#        echo "set account"
#        echo "clean resource"
#        python $workDir/scripts/live_test/clean.py
